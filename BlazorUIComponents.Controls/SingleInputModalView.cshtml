@using BlazorUIComponents.Controls
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.Collections.Specialized
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Layouts
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Services

@inject IJSRuntime JSRuntime

@inherits ComponentBase


<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" ref="modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    @Description
                </div>
                <div class="form-group">
                    <label for="recipient-name" class="col-form-label">@InputHeader</label>
                    <input type="text" class="form-control" id="course-name" bind-value-oninput=@InputValue onkeypress="@OnKeyPressed" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="@OnSubmitClicked">Submit</button>
            </div>
        </div>
    </div>
</div>

@functions{
    ElementRef modal;
    string Title;
    string Description;
    string InputHeader;
    string InputValue;

    [Parameter]
    string HackParameter { get; set; }

    AsyncManualResetEvent<string> asyncManualResetEvent = new AsyncManualResetEvent<string>();

    protected override async Task OnAfterRenderAsync()
    {
        await JSRuntime.InvokeAsync<object>("singleInputModalView.initialize", modal, new DotNetObjectRef(this));
        await base.OnAfterRenderAsync();
    }

    [JSInvokable]
    public void NotifySingleInputModalViewHidden()
    {
        if (asyncManualResetEvent.IsReset)
        {
            //then cancel task with a null string.
            asyncManualResetEvent.Set(null);
        }
    }

    async Task OnSubmitClicked(UIMouseEventArgs e)
    {
        asyncManualResetEvent.Set(InputValue);
        await JSRuntime.InvokeAsync<object>("singleInputModalView.hideModal", modal);
    }

    async Task OnKeyPressed(UIKeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            //complete and return result;
            asyncManualResetEvent.Set(InputValue);
            await JSRuntime.InvokeAsync<object>("singleInputModalView.hideModal", modal);
        }
        //return Task.CompletedTask;
    }

    public async Task<string> ShowModalAsync(string title, string description, string inputHeader)
    {
        this.Title = title;
        this.Description = description;
        this.InputHeader = inputHeader;
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("singleInputModalView.showModal", modal);

        if (!asyncManualResetEvent.IsReset)
            asyncManualResetEvent.Reset();

        var result = await asyncManualResetEvent.WaitAsync();

        InputValue = "";

        return result;
    }

}
