@using BlazorUIComponents.Controls
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using System.Collections.Specialized
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Layouts
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Services

@inject IJSRuntime JSRuntime

@inherits ComponentBase


<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" ref="modal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group lead">
                    @Description
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="@OnSubmitClicked">Confirm</button>
            </div>
        </div>
    </div>
</div>

@functions{
    ElementRef modal;
    string Title;
    string Description;

    AsyncManualResetEvent<bool> asyncManualResetEvent = new AsyncManualResetEvent<bool>();

    protected override async Task OnAfterRenderAsync()
    {
        await JSRuntime.InvokeAsync<object>("confirmationModalView.initialize", modal, new DotNetObjectRef(this));
        await base.OnAfterRenderAsync();
    }

    [JSInvokable]
    public void NotifyConfirmationModalViewHidden()
    {
        if (asyncManualResetEvent.IsReset)
        {
            //then cancel task with a null string.
            asyncManualResetEvent.Set(false);
        }
    }

    async Task OnSubmitClicked(UIMouseEventArgs e)
    {
        asyncManualResetEvent.Set(true);
        await JSRuntime.InvokeAsync<object>("confirmationModalView.hideModal", modal);
    }

    async Task OnKeyPressed(UIKeyboardEventArgs e)
    {
        //if (e.Key == "Enter")
        //{
        //    //complete and return result;
        //    asyncManualResetEvent.Set(false);
        //    await JSRuntime.InvokeAsync<object>("confirmationModalView.hideModal", modal);
        //}
        //return Task.CompletedTask;
    }

    public async Task<bool> ShowModalAsync(string title, string description)
    {
        this.Title = title;
        this.Description = description;
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("confirmationModalView.showModal", modal);

        if (!asyncManualResetEvent.IsReset)
            asyncManualResetEvent.Reset();

        var result = await asyncManualResetEvent.WaitAsync();

        return result;
    }

}
