@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Routing
@using ReactiveUI;
@using System.Reactive.Linq;

@inject IUriHelper UriHelper

@inherits ComponentBase

<button class=@(_classes + (isActive? " active" : "")) disabled=@isDisabled onclick=@ButtonClicked>
    @ChildContent
</button>

@functions{
    [Parameter]
    protected string Classes { get; set; }

    [Parameter]
    private object Command { get; set; }

    [Parameter]
    private object CommandParameter { get; set; }

    [Parameter]
    private RenderFragment ChildContent { get; set; }

    [Parameter]
    NavLinkMatch Match { get; set; } = NavLinkMatch.Prefix;

    [Parameter]
    private string HRef { get; set; }

    private IDisposable canExecuteSub;
    private bool isDisabled = false;
    protected bool isActive = false;
    protected string _classes;

    protected override Task OnInitAsync()
    {
        UriHelper.OnLocationChanged += OnLocationChanged;

        return base.OnInitAsync();
    }

    public override Task SetParametersAsync(ParameterCollection parameters)
    {
        parameters.TryGetValue<string>("Classes", out _classes);
        //            _classes = _baseClasses;

        if (parameters.TryGetValue<object>("Command", out var command))
        {
            Type t = command.GetType();
            if (t.IsGenericType)
            {
                if (t.GetGenericTypeDefinition() == typeof(ReactiveCommand<,>)) //check the object is our type
                {
                    var canExecuteObs = (IObservable<bool>)t.GetProperty("CanExecute").GetValue(command);

                    if (canExecuteSub != null)
                    {
                        canExecuteSub.Dispose();
                    }
                    canExecuteSub = canExecuteObs.Subscribe(canExecute =>
                    {
                        isDisabled = !canExecute;
                        Invoke(() => { StateHasChanged(); });
                    });
                }
            }
        }

        return base.SetParametersAsync(parameters);
    }

    private Task ButtonClicked()
    {
        if (Command != null)
        {
            Type t = Command.GetType();
            if (t.IsGenericType)
            {
                if (t.GetGenericTypeDefinition() == typeof(ReactiveCommand<,>)) //check the object is our type
                {
                    var method = t.GetMethod("Execute");
                    ((IObservable<Task>)(method.Invoke(Command, new[] { CommandParameter }))).ObserveOn(RxApp.MainThreadScheduler).Subscribe();
                }
            }
        }
        return Task.CompletedTask;
    }

    private void OnLocationChanged(object sender, string newUriAbsolute)
    {
        if (ShouldMatch(newUriAbsolute))
        {
            isActive = true;
        }
        else
        {
            isActive = false;
        }

        Invoke(() => StateHasChanged());
    }

    private bool ShouldMatch(string currentUriAbsolute)
    {
        var linkHrefAbsolute = UriHelper.ToAbsoluteUri(HRef).AbsoluteUri;

        if (EqualsHrefExactlyOrIfTrailingSlashAdded(currentUriAbsolute))
        {
            return true;
        }

        if (Match == NavLinkMatch.Prefix
            && IsStrictlyPrefixWithSeparator(currentUriAbsolute, linkHrefAbsolute))
        {
            return true;
        }

        return false;
    }

    private bool EqualsHrefExactlyOrIfTrailingSlashAdded(string currentUriAbsolute)
    {
        var linkHrefAbsolute = UriHelper.ToAbsoluteUri(HRef).AbsoluteUri;

        if (string.Equals(currentUriAbsolute, linkHrefAbsolute, StringComparison.Ordinal))
        {
            return true;
        }

        if (currentUriAbsolute.Length == linkHrefAbsolute.Length - 1)
        {
            // Special case: highlight links to http://host/path/ even if you're
            // at http://host/path (with no trailing slash)
            //
            // This is because the router accepts an absolute URI value of "same
            // as base URI but without trailing slash" as equivalent to "base URI",
            // which in turn is because it's common for servers to return the same page
            // for http://host/vdir as they do for host://host/vdir/ as it's no
            // good to display a blank page in that case.
            if (linkHrefAbsolute[linkHrefAbsolute.Length - 1] == '/'
                && linkHrefAbsolute.StartsWith(currentUriAbsolute, StringComparison.Ordinal))
            {
                return true;
            }
        }

        return false;
    }

    private string CombineWithSpace(string str1, string str2)
            => str1 == null ? str2
            : (str2 == null ? str1 : $"{str1} {str2}");

    private static bool IsStrictlyPrefixWithSeparator(string value, string prefix)
    {
        var prefixLength = prefix.Length;
        if (value.Length > prefixLength)
        {
            return value.StartsWith(prefix, StringComparison.Ordinal)
                && (
                    // Only match when there's a separator character either at the end of the
                    // prefix or right after it.
                    // Example: "/abc" is treated as a prefix of "/abc/def" but not "/abcdef"
                    // Example: "/abc/" is treated as a prefix of "/abc/def" but not "/abcdef"
                    prefixLength == 0
                    || !char.IsLetterOrDigit(prefix[prefixLength - 1])
                    || !char.IsLetterOrDigit(value[prefixLength])
                );
        }
        else
        {
            return false;
        }
    }

}
