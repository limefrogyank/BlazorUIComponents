@using Microsoft.AspNetCore.Components
@using System.Collections.Specialized
@using System.Collections
@using BlazorUIComponents.Controls


@inherits ComponentBase

    <CascadingValue Value=this>
        <div class="ui middle aligned big divided selection list" style="overflow: auto;">
            @if (ItemsSource != null)
            {
                @if (IsGrouped)
                {
                    int index = 0;
                    @foreach (var group in (IEnumerable)ItemsSource)
                    {
                        <ListViewGroup Model=@group
                                       DisplayName=@(group.GetType().GetProperty(GroupingKey).GetValue(group).ToString())>
                           
                            @foreach (var item in (IEnumerable)group)
                            {
                                <ListViewItem Model=@item
                                              Index=@index
                                              ActiveItem=@SelectedItem
                                              Classes=@(baseClasses)
                                              ItemClicked=@(e => OnItemClick(e, item))>
                                    @ItemTemplate(item)
                                </ListViewItem>


                                index++;

                            }
                        </ListViewGroup>
                        
                    }
                }
                else
                {
                    int index = 0;
                    @foreach (var item in (IEnumerable)ItemsSource)
                    {                        
                        <ListViewItem Model=@item
                                      Index=@index
                                      ActiveItem=@SelectedItem
                                      Classes=@(baseClasses)
                                      ItemClicked=@(e => OnItemClick(e, item))>
                            @ItemTemplate(item)
                        </ListViewItem>

                        index++;
                    }
                }
            }
        </div>
    </CascadingValue>

@functions{
    private INotifyCollectionChanged notifyCollectionChanged;
    private const string baseClasses = "item";
    private SelectionMode selectionMode = SelectionMode.None;

    [Parameter]
    public object SelectedItem { get; private set; }

    [Parameter]
    public object ItemsSource { get; private set; }
    
    [Parameter]
    private RenderFragment<object> ItemTemplate { get; set; }

    [Parameter]
    private bool IsGrouped { get; set; }

    [Parameter]
    private string GroupingKey { get; set; }


    [Parameter]
    public SelectionMode SelectionMode
    {
        get => selectionMode;
        private set
        {
            selectionMode = value;
            if (selectionMode == SelectionMode.None)
            {
                SetSelectedItem(default(object));
            }
        }
    }

    [Parameter]
    public Action<object> OnSelectedItemChanged { get; private set; }

    [Parameter]
    private Func<object, Task> ItemClicked { get; set; }


    public void SetSelectedItem(object selectedItem)
    {
        SelectedItem = selectedItem;
        if (OnSelectedItemChanged != null)
        {
            OnSelectedItemChanged.Invoke(SelectedItem);
        }
        StateHasChanged();
    }

    protected override Task OnInitAsync()
    {
        return base.OnInitAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        if (notifyCollectionChanged != ItemsSource)
        {
            if (notifyCollectionChanged != null)
            {
                //unsubscribe all the old stuff
                notifyCollectionChanged.CollectionChanged -= CollectionChanged;
                //including grouped collections
                if (IsGrouped)
                {
                    foreach (var group in (IEnumerable)ItemsSource)
                    {
                        if (group is INotifyCollectionChanged)
                        {
                            notifyCollectionChanged = (INotifyCollectionChanged)group;
                            notifyCollectionChanged.CollectionChanged -= SubCollectionChanged;
                        }
                    }
                }
            }
            //now subscribe to new collection
            if (ItemsSource is INotifyCollectionChanged)
            {
                notifyCollectionChanged = (INotifyCollectionChanged)ItemsSource;
                notifyCollectionChanged.CollectionChanged += CollectionChanged;
            }

            //check if grouped and subscribe to internal collections
            if (IsGrouped)
            {
                foreach (var group in (IEnumerable)ItemsSource)
                {
                    if (group is INotifyCollectionChanged)
                    {
                        notifyCollectionChanged = (INotifyCollectionChanged)group;
                        notifyCollectionChanged.CollectionChanged += SubCollectionChanged;
                    }
                }
            }
        }

        return base.OnParametersSetAsync();
    }


    private Task OnItemClick(UIMouseEventArgs e, object item)
    {
        if (SelectionMode == SelectionMode.None)
        {
            if (ItemClicked != null)
            {
                return ItemClicked.Invoke(item);
            }
        }
        else if (SelectionMode == SelectionMode.Single)
        {
            SetSelectedItem(item);
        }
        return Task.CompletedTask;
    }

    private void CollectionChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        // is this a change to a grouped collection? 
        if (IsGrouped)
        {
            if (args.Action == NotifyCollectionChangedAction.Add)
            {                
                //need to subscribe grouped collections
                foreach (var group in args.NewItems)
                {
                    if (group is INotifyCollectionChanged)
                    {
                        notifyCollectionChanged = (INotifyCollectionChanged)group;
                        notifyCollectionChanged.CollectionChanged += SubCollectionChanged;
                    }
                }
            }
            if (args.Action == NotifyCollectionChangedAction.Remove)
            {
                //need to unsubscribe grouped collections
                foreach (var group in args.OldItems)
                {
                    if (group is INotifyCollectionChanged)
                    {
                        notifyCollectionChanged = (INotifyCollectionChanged)group;
                        notifyCollectionChanged.CollectionChanged -= SubCollectionChanged;
                    }
                }
            }
        }

        Invoke(() => StateHasChanged());
    }

    private void SubCollectionChanged(object sender, NotifyCollectionChangedEventArgs args)
    {
        Invoke(() => StateHasChanged());
    }

}
