@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using BlazorUIComponents.Controls

@inject IJSRuntime JSRuntime

@inherits ComponentBase


    <div class="ui basic modal" ref="modal">
        <div class="ui icon header">
            <i class="archive icon"></i>
            @Title
        </div>
        <div class="content">
            <p>@Description</p>
            <div class="ui inverted form">
                <div class="field">
                    <label for="recipient-name" class="col-form-label">@InputHeader</label>
                    <input type="text" id="course-name" bind-value-oninput=@InputValue onkeypress="@OnKeyPressed" />
                </div>
            </div>
        </div>
        <div class="actions">
            <div class="ui red basic cancel inverted button">
                <i class="remove icon"></i>
                Cancel
            </div>
            <div class="ui green ok inverted button">
                <i class="checkmark icon"></i>
                Ok
            </div>
        </div>
       
            @*<div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="@OnSubmitClicked">Submit</button>
            </div>*@

    </div>


@functions{
    ElementRef modal;
    string Title;
    string Description;
    string InputHeader;
    string InputValue;

    bool initialized = false;

    [Parameter]
    string HackParameter { get; set; }

    AsyncManualResetEvent<string> asyncManualResetEvent = new AsyncManualResetEvent<string>();

    protected override async Task OnAfterRenderAsync()
    {
        if (!initialized)
        {
            initialized = true;
            await JSRuntime.InvokeAsync<object>("singleInputModalViewSemantic.initialize", modal, new DotNetObjectRef(this));
            await base.OnAfterRenderAsync();
        }
    }

    [JSInvokable]
    public void NotifySingleInputModalViewSemanticHidden()
    {
        if (asyncManualResetEvent.IsReset)
        {
            //then cancel task with a null string.
            asyncManualResetEvent.Set(null);
        }
    }

    [JSInvokable]
    public void NotifySingleInputModalViewSemanticApproved()
    {
        asyncManualResetEvent.Set(InputValue);
    }

    async Task OnSubmitClicked(UIMouseEventArgs e)
    {
        asyncManualResetEvent.Set(InputValue);
        await JSRuntime.InvokeAsync<object>("singleInputModalViewSemantic.hideModal", modal);
    }

    async Task OnKeyPressed(UIKeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            //complete and return result;
            asyncManualResetEvent.Set(InputValue);
            await JSRuntime.InvokeAsync<object>("singleInputModalViewSemantic.hideModal", modal);
        }
        //return Task.CompletedTask;
    }

    public async Task<string> ShowModalAsync(string title, string description, string inputHeader)
    {
        this.Title = title;
        this.Description = description;
        this.InputHeader = inputHeader;
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("singleInputModalViewSemantic.showModal", modal);

        if (!asyncManualResetEvent.IsReset)
        {
            asyncManualResetEvent.Reset();
        }

        var result = await asyncManualResetEvent.WaitAsync();

        InputValue = "";

        return result;
    }

}
