@inherits ReactiveBase
@inject IComponentContext componentContext
@inject IJSRuntime JSRuntime

    <div style="display:flex;">
        <button class="ui icon button navbar-toggler" style="border-radius: 0px;" onclick="@ToggleNavMenu">
            <i class="bars icon"></i>
        </button>
        <div class="ui fluid menu vertical" style="border-radius: 0px; border-width:0px; margin: 0px; box-shadow:none;">
            <div class="item" style="height: 40px;">

                <a class=" header" href="courses">BlazorUIComponents</a>
            </div>
        </div>
    </div>

   


@if (Vm != null)
{
<div class="collapse" onclick="@ToggleNavMenu" ref="menuRef">
    <div class="ui fluid massive vertical menu">

        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.ListViewDemoViewModel"
                         Match="NavLinkMatch.All"
                         HRef="listview">
            <i class="list icon"></i> ListView
        </ReactiveNavLink>
        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.GroupedListViewDemoViewModel"
                         Match="NavLinkMatch.All"
                         HRef="groupedlistview">
            <i class="list ol icon"></i> Grouped ListView
        </ReactiveNavLink>
        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.CommandBarDemoViewModel"
                         Match="NavLinkMatch.All"
                         HRef="commandbar">
            <i class="ellipsis horizontal icon"></i> CommandBar
        </ReactiveNavLink>
        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.CounterViewModel"
                         HRef="counter">
            <i class="plus icon"></i> Check In
        </ReactiveNavLink>
        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.FetchDataViewModel"
                         HRef="fetchdata">
            <i class="search icon"></i> Fetch data
        </ReactiveNavLink>
    </div>
    
 
</div>
}

@functions {
     ElementRef menuRef;

    bool isInitialized = false;
    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    MainViewModel Vm;
    INavigationService navigationService;


    //async Task OnClickAsync(string href)
    //{
    //    switch (href)
    //    {
    //        case "listview":
    //            await navigationService.NavigateToAsync(Vm.ListViewDemoViewModel);
    //            break;
    //        case "groupedlistview":
    //            await navigationService.NavigateToAsync(Vm.GroupedListViewDemoViewModel);
    //            break;
    //        case "checkin":
    //            await navigationService.NavigateToAsync(Vm.CounterViewModel);
    //            break;
    //        default:
    //            await navigationService.NavigateToAsync(Vm.FetchDataViewModel);
    //            break;
    //    }
    //}

    protected override async Task OnAfterRenderAsync()
    {
        if (!isInitialized)
        {
            navigationService = Locator.Current.GetService<INavigationService>();
            Vm = Locator.Current.GetService<MainViewModel>();
            RegisterViewModel(Vm);
            isInitialized = true;
            await navigationService.NavigateToAsync(Locator.Current.GetServiceExt<ListViewDemoViewModel>());
            //await Invoke(()=>StateHasChanged());
            StateHasChanged();
        }
        await base.OnAfterRenderAsync();
    }


    async void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
         if (collapseNavMenu)
        {
            await JSRuntime.InvokeAsync<object>("hideMenu", menuRef);
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("showMenu", menuRef);
        }
    }
}
