@inherits ReactiveBase
@inject IComponentContext componentContext

<div class="top-row pl-4 navbar navbar-dark">
     <button class="ui icon button navbar-toggler" onclick="@ToggleNavMenu">
        <i class="bars icon"></i>
    </button>
     <div class="item header">BlazorUIComponents.Demo</div>
</div>

   


@if (Vm != null)
{
<div class="@NavMenuCssClass" onclick="@ToggleNavMenu">
    <div class="ui fluid massive vertical menu">

        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.ListViewDemoViewModel"
                         Match="NavLinkMatch.All"
                         HRef="listview">
            <i class="list icon"></i> ListView
        </ReactiveNavLink>
        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.GroupedListViewDemoViewModel"
                         Match="NavLinkMatch.All"
                         HRef="groupedlistview">
            <i class="list ol icon"></i> Grouped ListView
        </ReactiveNavLink>
        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.CounterViewModel"
                         HRef="counter">
            <i class="plus icon"></i> Check In
        </ReactiveNavLink>
        <ReactiveNavLink Classes="link item"
                         Command="@Vm.NavLinkCommand"
                         CommandParameter="@Vm.FetchDataViewModel"
                         HRef="fetchdata">
            <i class="search icon"></i> Fetch data
        </ReactiveNavLink>
    </div>
    
 
</div>
}

@functions {
    bool isInitialized = false;
    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    MainViewModel Vm;
    INavigationService navigationService;


    async Task OnClickAsync(string href)
    {
        switch (href)
        {
            case "listview":
                await navigationService.NavigateToAsync(Vm.ListViewDemoViewModel);
                break;
            case "groupedlistview":
                await navigationService.NavigateToAsync(Vm.GroupedListViewDemoViewModel);
                break;
            case "checkin":
                await navigationService.NavigateToAsync(Vm.CounterViewModel);
                break;
            default:
                await navigationService.NavigateToAsync(Vm.FetchDataViewModel);
                break;
        }
    }

    protected override async Task OnAfterRenderAsync()
    {
        if (!isInitialized)
        {
            navigationService = Locator.Current.GetService<INavigationService>();
            Vm = Locator.Current.GetService<MainViewModel>();
            RegisterViewModel(Vm);
            isInitialized = true;
            await navigationService.NavigateToAsync(Locator.Current.GetServiceExt<ListViewDemoViewModel>());
            //await Invoke(()=>StateHasChanged());
            StateHasChanged();
        }
        await base.OnAfterRenderAsync();
    }


    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
