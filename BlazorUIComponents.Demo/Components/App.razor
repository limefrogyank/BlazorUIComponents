@*
    The Router component displays whichever component has a @page
    directive matching the current URI.
*@

@inject HttpClient client
@inject IJSRuntime JSRuntime
@inject IUriHelper UriHelper
@inject IComponentContext componentContext

@* This PreRenderCascade component lets us know when we're doing server-side prerendering so we can avoid logic that uses JSRuntime or Navigation (IUriHelper) that's for client only. *@
@*  <PreRenderCascade>*@

@*<EmbeddedContent BaseType="@(typeof(SingleInputModalView))" />*@

<SingleInputModalView ref="singleInputModalView"></SingleInputModalView>

<Router AppAssembly="typeof(Startup).Assembly" />

@*</PreRenderCascade>*@

@functions{
    private SingleInputModalView singleInputModalView;
    private DialogService dialogService;

       
    protected async override Task OnAfterRenderAsync()
    {
        Locator.CurrentMutable.RegisterConstant<IJSRuntime>(JSRuntime);
        Locator.CurrentMutable.RegisterConstant<IUriHelper>(UriHelper);
        Locator.CurrentMutable.RegisterConstant<HttpClient>(client);


        Locator.CurrentMutable.Register<MainViewModel>();
        Locator.CurrentMutable.Register<ListViewDemoViewModel>();
        Locator.CurrentMutable.Register<CounterViewModel>();
        Locator.CurrentMutable.Register<FetchDataViewModel>();


        //Locator.CurrentMutable.RegisterConstant(new DataService(), typeof(IDataService));
        Locator.CurrentMutable.RegisterConstant(new WeatherForecastService(), typeof(WeatherForecastService));

        dialogService = new DialogService();
        dialogService.Register(singleInputModalView.ShowModalAsync);
        Locator.CurrentMutable.RegisterConstant(dialogService, typeof(IDialogService));
        Locator.CurrentMutable.RegisterConstant(new NavigationService(), typeof(INavigationService));

        await base.OnAfterRenderAsync();
    }
}