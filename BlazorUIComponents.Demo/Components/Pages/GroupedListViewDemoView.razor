@page "/groupedlistview"

@inherits BlazorUIComponents.Demo.Components.NavPageBase<BlazorUIComponents.Core.ViewModel.GroupedListViewDemoViewModel>
@inject IJSRuntime JSRuntime

@using BlazorUIComponents.Core.ViewModel.ListViewDemo;

<h1>ListView Demo</h1>


<div class="ui toggle checkbox">
    <input type="checkbox" id="customSwitch1" bind="@isChecked" />
    <label for="customSwitch1">@(isChecked ? SelectionMode.Single : SelectionMode.None)</label>
</div>

@if (isChecked)
{
    <div>Selected Item:  @(Vm != null && Vm.SelectedItem != null ? ((SampleItemViewModel)Vm.SelectedItem).DisplayName : "")</div>
    @*There's a brief time period when isChecked is true and Vm.SelectedItem is still null... use null checking '?'*@
}
<p></p>
<ReactiveButton Classes="ui button" Command="@Vm?.AddSampleItemCommand">Add Item</ReactiveButton>

@*BUG-Must use fully qualified component tags to get the inner RenderFragments working (i.e. ItemTemplate)*@
@if (Vm != null)
{
    <BlazorUIComponents.Controls.ListView ItemsSource=@Vm.SampleItemViewModels
                                          IsGrouped="true"
                                          GroupingKey="Key"
                                          SelectionMode=@(isChecked ? SelectionMode.Single : SelectionMode.None)
                                          bind-SelectedItem-OnSelectedItemChanged=@Vm.SelectedItem
                                          ItemClicked=@OnItemClicked>
        <ItemTemplate Context="listitem">
            <div class="ui header">
                <div class="content">
                    @(((SampleItemViewModel)listitem).DisplayName)
                    <div class="sub header">@(((SampleItemViewModel)listitem).Date)</div>
                </div>

            </div>

        </ItemTemplate>
    </BlazorUIComponents.Controls.ListView>
}


@functions {

    bool isChecked = false;


    Task OnItemClicked(object item)
    {
        var model = (SampleItemViewModel)item;
        Vm.SampleItemClickCommand.Execute(model).Subscribe();
        return Task.CompletedTask;
    }

}
